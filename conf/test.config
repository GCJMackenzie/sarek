/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run nf-core/sarek -profile test,<extra_test_profile>,<docker/singularity> --outdir <OUTDIR>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

try {
    includeConfig "https://raw.githubusercontent.com/nf-core/modules/master/tests/config/test_data.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/modules test data config")
}

params {

    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = '6.GB'
    max_time   = '8.h'

    // Input data
    input = "${baseDir}/tests/csv/3.0/fastq_single.csv"

    // Small reference genome
    genome            = null
    igenomes_ignore   = true
    dbsnp             = params.test_data['homo_sapiens']['genome']['dbsnp_146_hg38_vcf_gz']
    fasta             = params.test_data['homo_sapiens']['genome']['genome_fasta']
    germline_resource = params.test_data['homo_sapiens']['genome']['gnomad_r2_1_1_vcf_gz']
    intervals         = params.test_data['homo_sapiens']['genome']['genome_interval_list']
    known_indels      = params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_vcf_gz']
    snpeff_db         = 'WBcel235.99'
    snpeff_genome     = 'WBcel235'
    vep_cache_version = 104
    vep_genome        = 'WBcel235'
    vep_species       = 'caenorhabditis_elegans'

    // Ignore params that will throw warning through params validation
    schema_ignore_params = "genomes,test_data"
}

profiles {
    annotation {
        params.input               = "${baseDir}/tests/csv/3.0/vcf_single.csv"
        params.step                = 'annotate'
    }
    no_intervals {
        params.no_intervals        = true
    }
    pair {
        params.input               = "${baseDir}/tests/csv/3.0/fastq_pair.csv"
    }
    markduplicates_bam {
        params.input               = "${baseDir}/tests/csv/3.0/mapped_single_bam.csv"
        params.step                = 'markduplicates'
    }
    markduplicates_cram {
        params.input               = "${baseDir}/tests/csv/3.0/mapped_single_cram.csv"
        params.step                = 'markduplicates'
    }
    prepare_recalibration_bam {
        params.input               = "${baseDir}/tests/csv/3.0/mapped_single_bam.csv"
        params.step                = 'prepare_recalibration'
    }
    prepare_recalibration_cram {
        params.input               = "${baseDir}/tests/csv/3.0/mapped_single_cram.csv"
        params.step                = 'prepare_recalibration'
    }
    recalibrate_bam {
        params.input               = "${baseDir}/tests/csv/3.0/prepare_recalibration_single_bam.csv"
        params.step                = 'recalibrate'
    }
    recalibrate_cram {
        params.input               = "${baseDir}/tests/csv/3.0/prepare_recalibration_single_cram.csv"
        params.step                = 'recalibrate'
    }
    save_bam_mapped {
        params.save_bam_mapped     = true
    }
    skip_bqsr {
        params.skip_tools          = "baserecalibrator"
    }
    skip_markduplicates {
        params.skip_tools          = "markduplicates"
    }
    split_fastq {
        params.split_fastq         = 150000
        params.save_split_fastqs   = true
    }
    targeted {
        params.intervals               = params.test_data['homo_sapiens']['genome']['genome_multi_interval_bed']
        params.wes                     = true
        params.nucleotides_per_second  = 20
    }
    tools {
        params.input               = "${baseDir}/tests/csv/3.0/recalibrated.csv"
        params.dbsnp               = params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz']
        params.fasta               = params.test_data['homo_sapiens']['genome']['genome_21_fasta']
        params.germline_resource   = params.test_data['homo_sapiens']['genome']['gnomad_r2_1_1_21_vcf_gz']
        params.intervals           = params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed']
        params.pon                 = params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz']
        params.step                = 'variant_calling'
        params.joint_germline      = true
        params.wes                 = true

        params.nucleotides_per_second = 20
    }
    tools_germline {
        params.input               = "${baseDir}/tests/csv/3.0/recalibrated_germline.csv"
        params.dbsnp               = params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz']
        params.known_indels        = params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz']
        params.fasta               = params.test_data['homo_sapiens']['genome']['genome_21_fasta']
        params.intervals           = params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed']
        params.step                = 'variant_calling'
        params.wes                 = true

        params.nucleotides_per_second = 20
    }
    tools_tumoronly {
        params.input               = "${baseDir}/tests/csv/3.0/recalibrated_tumoronly.csv"
        params.dbsnp               = params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz']
        params.fasta               = params.test_data['homo_sapiens']['genome']['genome_21_fasta']
        params.germline_resource   = params.test_data['homo_sapiens']['genome']['gnomad_r2_1_1_21_vcf_gz']
        params.intervals           = params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed']
        params.pon                 = params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz']
        params.step                = 'variant_calling'
        params.joint_germline      = true
        params.wes                 = true

        params.nucleotides_per_second = 20
    }
    tools_somatic {
        params.input               = "${baseDir}/tests/csv/3.0/recalibrated_somatic.csv"
        params.chr_dir             = params.test_data['homo_sapiens']['genome']['genome_21_chromosomes_dir']
        params.dbsnp               = params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz']
        params.fasta               = params.test_data['homo_sapiens']['genome']['genome_21_fasta']
        params.germline_resource   = params.test_data['homo_sapiens']['genome']['gnomad_r2_1_1_21_vcf_gz']
        params.intervals           = params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed']
        params.pon                 = params.test_data['homo_sapiens']['genome']['mills_and_1000g_indels_21_vcf_gz']
        params.step                = 'variant_calling'
        params.joint_germline      = true
        params.wes                 = true

        params.nucleotides_per_second = 20
    }
    trimming {
        params.clip_r1             = 1
        params.clip_r2             = 1
        params.three_prime_clip_r1 = 1
        params.three_prime_clip_r2 = 1
        params.trim_fastq          = true
    }
    umi {
        params.input               = "${baseDir}/tests/csv/3.0/fastq_umi.csv"
        params.umi_read_structure  = '7M1S+T'
    }
    use_gatk_spark {
        params.use_gatk_spark      = 'baserecalibrator,markduplicates'
    }
    variantcalling_channels {
        params.input               = "${baseDir}/tests/csv/3.0/recalibrated.csv"
        params.fasta               = params.test_data['homo_sapiens']['genome']['genome_21_fasta']
        params.intervals           = params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed']
        params.wes                 = true
        params.step                = 'variant_calling'

        params.nucleotides_per_second = 20
    }
}
